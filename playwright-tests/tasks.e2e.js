/* E2E —Ç–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á
 */

import { test, expect } from '@playwright/test'
import { AuthHelpers, TaskHelpers, WaitHelpers, FileHelpers } from './utils/helpers.js'

test.describe('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏', () => {
  let authHelpers
  let _taskHelpers
  let waitHelpers

  test.beforeEach(async ({ page }) => {
    authHelpers = new AuthHelpers(page)
    _taskHelpers = new TaskHelpers(page)
    waitHelpers = new WaitHelpers(page)
  })

  test.describe('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á (—Ä–µ–±–µ–Ω–æ–∫)', () => {
    test.beforeEach(async ({ page }) => {
      // –ú–æ–∫–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Ä–µ–±–µ–Ω–∫–∞
      await page.route('**/auth/v1/user*', async route => {
        const json = {
          user: {
            id: 'child-1',
            email: 'child@example.com',
            role: 'child'
          }
        }
        await route.fulfill({ json })
      })

      // –ú–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
      await page.route('**/rest/v1/tasks*', async route => {
        const json = [
          {
            id: 'task-1',
            title: '–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
            description: '–£–±—Ä–∞—Ç—å –∏–≥—Ä—É—à–∫–∏ –∏ –ø—Ä–æ–ø—ã–ª–µ—Å–æ—Å–∏—Ç—å',
            status: 'pending',
            priority: 'high',
            reward: { stars: 5, money: 100, screen_time: 30 },
            due_date: '2024-12-31T23:59:59Z'
          },
          {
            id: 'task-2',
            title: '–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É',
            description: '–ü–æ–º—ã—Ç—å –≤—Å–µ —Ç–∞—Ä–µ–ª–∫–∏ –∏ —á–∞—à–∫–∏',
            status: 'in_progress',
            priority: 'medium',
            reward: { stars: 3, money: 50, screen_time: 15 }
          }
        ]
        await route.fulfill({ json })
      })
    })

    test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Ä–µ–±–µ–Ω–∫–∞', async ({ page }) => {
      await authHelpers.login('child@example.com', 'password123')
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á
      await waitHelpers.waitForLoadingToFinish()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      await expect(page.locator('h2:has-text("–ú–æ–∏ –∑–∞–¥–∞—á–∏")')).toBeVisible()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏
      await expect(page.locator('text="–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"')).toBeVisible()
      await expect(page.locator('text="–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É"')).toBeVisible()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
      const firstTask = page.locator('text="–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"').locator('..').locator('..')
      await expect(firstTask.locator('text="–í—ã—Å–æ–∫–∏–π"')).toBeVisible() // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      await expect(firstTask.locator('text="‚≠ê 5"')).toBeVisible() // –ù–∞–≥—Ä–∞–¥–∞
      await expect(firstTask.locator('text="üí∞ 100‚ÇΩ"')).toBeVisible()
      await expect(firstTask.locator('text="üéÆ 30–º–∏–Ω"')).toBeVisible()
    })

    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á', async ({ page }) => {
      await authHelpers.login('child@example.com', 'password123')
      await waitHelpers.waitForLoadingToFinish()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
      const pendingTask = page.locator('text="–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"').locator('..').locator('..')
      await expect(pendingTask.locator('text="–û–∂–∏–¥–∞–µ—Ç"')).toBeVisible()
      await expect(pendingTask.locator('button:has-text("–ù–∞—á–∞—Ç—å")')).toBeVisible()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏
      const inProgressTask = page.locator('text="–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É"').locator('..').locator('..')
      await expect(inProgressTask.locator('text="–í –ø—Ä–æ—Ü–µ—Å—Å–µ"')).toBeVisible()
      await expect(inProgressTask.locator('button:has-text("–ó–∞–≤–µ—Ä—à–∏—Ç—å")')).toBeVisible()
      await expect(inProgressTask.locator('button:has-text("–ë–µ–∑ —Ñ–æ—Ç–æ")')).toBeVisible()
    })

    test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∑–∞–¥–∞—á', async ({ page }) => {
      // –ú–æ–∫–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      await page.route('**/rest/v1/tasks*', async route => {
        await route.fulfill({ json: [] })
      })

      await authHelpers.login('child@example.com', 'password123')
      await waitHelpers.waitForLoadingToFinish()
      
      await expect(page.locator('text="–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç"')).toBeVisible()
      await expect(page.locator('text="–†–æ–¥–∏—Ç–µ–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –≤–∞–º –∑–∞–¥–∞–Ω–∏—è"')).toBeVisible()
    })
  })

  test.describe('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á (—Ä–µ–±–µ–Ω–æ–∫)', () => {
    test.beforeEach(async ({ page }) => {
      await page.route('**/auth/v1/user*', async route => {
        const json = {
          user: { id: 'child-1', email: 'child@example.com', role: 'child' }
        }
        await route.fulfill({ json })
      })

      await page.route('**/rest/v1/tasks*', async route => {
        if (route.request().method() === 'GET') {
          const json = [
            {
              id: 'task-1',
              title: '–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
              status: 'pending',
              priority: 'high',
              reward: { stars: 5, money: 100, screen_time: 30 }
            }
          ]
          await route.fulfill({ json })
        } else {
          // PATCH –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
          await route.fulfill({ json: {} })
        }
      })
    })

    test('–Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏', async ({ page }) => {
      await authHelpers.login('child@example.com', 'password123')
      await waitHelpers.waitForLoadingToFinish()
      
      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É
      await page.click('button:has-text("–ù–∞—á–∞—Ç—å")')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      await waitHelpers.waitForToast('–ó–∞–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞')
    })

    test('–∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–¥–∞—á—É –±–µ–∑ —Ñ–æ—Ç–æ', async ({ page }) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–∫ –¥–ª—è –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      await page.route('**/rest/v1/tasks*', async route => {
        if (route.request().method() === 'GET') {
          const json = [
            {
              id: 'task-1',
              title: '–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
              status: 'in_progress',
              priority: 'high'
            }
          ]
          await route.fulfill({ json })
        } else {
          await route.fulfill({ json: {} })
        }
      })

      await authHelpers.login('child@example.com', 'password123')
      await waitHelpers.waitForLoadingToFinish()
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
      await page.click('button:has-text("–ë–µ–∑ —Ñ–æ—Ç–æ")')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      await waitHelpers.waitForToast('–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    })

    test('–∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–¥–∞—á—É —Å —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º', async ({ page }) => {
      // –ú–æ–∫ –¥–ª—è Storage API
      await page.route('**/storage/v1/object/task-proofs/**', async route => {
        await route.fulfill({ 
          status: 200,
          json: { message: 'File uploaded' }
        })
      })

      await page.route('**/rest/v1/tasks*', async route => {
        if (route.request().method() === 'GET') {
          const json = [
            {
              id: 'task-1',
              title: '–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
              status: 'in_progress',
              priority: 'high'
            }
          ]
          await route.fulfill({ json })
        } else {
          await route.fulfill({ json: {} })
        }
      })

      await authHelpers.login('child@example.com', 'password123')
      await waitHelpers.waitForLoadingToFinish()
      
      // –ù–∞–∂–∏–º–∞–µ–º "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
      await page.click('button:has-text("–ó–∞–≤–µ—Ä—à–∏—Ç—å")')
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏
      await expect(page.locator('text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"')).toBeVisible()
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const testImagePath = FileHelpers.createTestImage()
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      const fileInput = page.locator('input[type="file"]')
      await fileInput.setInputFiles(testImagePath)
      
      // –ñ–¥–µ–º preview
      await expect(page.locator('img[alt="Preview"]')).toBeVisible()
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
      await page.click('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      await waitHelpers.waitForToast('–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —Ñ–æ—Ç–æ')
    })

    test('–æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ', async ({ page }) => {
      await page.route('**/rest/v1/tasks*', async route => {
        if (route.request().method() === 'GET') {
          const json = [
            {
              id: 'task-1',
              title: '–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
              status: 'in_progress',
              priority: 'high'
            }
          ]
          await route.fulfill({ json })
        }
      })

      await authHelpers.login('child@example.com', 'password123')
      await waitHelpers.waitForLoadingToFinish()
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∑–∞–≥—Ä—É–∑–∫–∏
      await page.click('button:has-text("–ó–∞–≤–µ—Ä—à–∏—Ç—å")')
      await expect(page.locator('text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"')).toBeVisible()
      
      // –û—Ç–º–µ–Ω—è–µ–º
      await page.click('button:has-text("–û—Ç–º–µ–Ω–∞")')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ —Å–∫—Ä—ã–ª–∞—Å—å
      await expect(page.locator('text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"')).toBeHidden()
    })
  })

  test.describe('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á (—Ä–æ–¥–∏—Ç–µ–ª—å)', () => {
    test.beforeEach(async ({ page }) => {
      await page.route('**/auth/v1/user*', async route => {
        const json = {
          user: { id: 'parent-1', email: 'parent@example.com', role: 'parent' }
        }
        await route.fulfill({ json })
      })

      // –ú–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–µ–π —Å–µ–º—å–∏
      await page.route('**/rest/v1/users*', async route => {
        const json = [
          {
            id: 'child-1',
            email: 'child1@example.com',
            role: 'child'
          },
          {
            id: 'child-2',
            email: 'child2@example.com',
            role: 'child'
          }
        ]
        await route.fulfill({ json })
      })

      // –ú–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
      await page.route('**/rest/v1/tasks*', async route => {
        if (route.request().method() === 'POST') {
          await route.fulfill({ json: { id: 'new-task-id' } })
        } else {
          await route.fulfill({ json: [] })
        }
      })
    })

    test('—Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É', async ({ page }) => {
      await authHelpers.login('parent@example.com', 'password123')
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await page.click('button:has-text("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")')
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
      await page.click('button:has-text("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")')
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
      await page.fill('input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"]', '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞')
      await page.fill('textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')
      await page.selectOption('select:nth-of-type(1)', 'child-1') // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–µ–±–µ–Ω–∫—É
      await page.selectOption('select:nth-of-type(2)', 'high') // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
      await page.click('button:has-text("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
      await waitHelpers.waitForToast('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
    })

    test('—Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏', async ({ page }) => {
      await authHelpers.login('parent@example.com', 'password123')
      
      await page.click('button:has-text("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")')
      await page.click('button:has-text("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")')
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      await page.fill('input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"]', '–ó–∞–¥–∞—á–∞ —Å –Ω–∞–≥—Ä–∞–¥–æ–π')
      await page.selectOption('select:nth-of-type(1)', 'child-1')
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
      await page.fill('input[type="number"]:nth-of-type(1)', '10') // –ó–≤–µ–∑–¥–æ—á–∫–∏
      await page.fill('input[step="0.01"]', '150') // –î–µ–Ω—å–≥–∏
      await page.fill('input[type="number"]:nth-of-type(3)', '45') // –í—Ä–µ–º—è —ç–∫—Ä–∞–Ω–∞
      
      await page.click('button:has-text("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")')
      
      await waitHelpers.waitForToast('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
    })

    test('—Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É —Å –¥–µ–¥–ª–∞–π–Ω–æ–º', async ({ page }) => {
      await authHelpers.login('parent@example.com', 'password123')
      
      await page.click('button:has-text("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")')
      await page.click('button:has-text("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")')
      
      await page.fill('input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"]', '–°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞')
      await page.selectOption('select:nth-of-type(1)', 'child-1')
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω
      const tomorrow = new Date()
      tomorrow.setDate(tomorrow.getDate() + 1)
      const dateTimeString = tomorrow.toISOString().slice(0, 16)
      await page.fill('input[type="datetime-local"]', dateTimeString)
      
      await page.click('button:has-text("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")')
      
      await waitHelpers.waitForToast('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
    })

    test('–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', async ({ page }) => {
      await authHelpers.login('parent@example.com', 'password123')
      
      await page.click('button:has-text("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")')
      await page.click('button:has-text("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")')
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      await page.click('button:has-text("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await expect(page.locator('text*="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"')).toBeVisible()
    })

    test('–æ—á–∏—â–∞–µ—Ç —Ñ–æ—Ä–º—É –ø–æ –∫–Ω–æ–ø–∫–µ', async ({ page }) => {
      await authHelpers.login('parent@example.com', 'password123')
      
      await page.click('button:has-text("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")')
      await page.click('button:has-text("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")')
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
      await page.fill('input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"]', '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞')
      await page.fill('textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]', '–û–ø–∏—Å–∞–Ω–∏–µ')
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      await page.click('button:has-text("–û—á–∏—Å—Ç–∏—Ç—å")')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –æ—á–∏—Å—Ç–∏–ª–∏—Å—å
      await expect(page.locator('input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"]')).toHaveValue('')
      await expect(page.locator('textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]')).toHaveValue('')
    })
  })

  test.describe('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á (—Ä–æ–¥–∏—Ç–µ–ª—å)', () => {
    test.beforeEach(async ({ page }) => {
      await page.route('**/auth/v1/user*', async route => {
        const json = {
          user: { id: 'parent-1', email: 'parent@example.com', role: 'parent' }
        }
        await route.fulfill({ json })
      })

      // –ú–æ–∫ –¥–ª—è –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
      await page.route('**/rest/v1/tasks*', async route => {
        if (route.request().method() === 'GET') {
          const json = [
            {
              id: 'task-1',
              title: '–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
              status: 'completed',
              priority: 'high',
              proof_url: 'http://test.com/proof.jpg',
              assigned_user: { email: 'child@example.com' },
              reward: { stars: 5, money: 100, screen_time: 30 },
              completed_at: '2024-01-01T12:00:00Z'
            }
          ]
          await route.fulfill({ json })
        } else {
          // PATCH –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          await route.fulfill({ json: {} })
        }
      })
    })

    test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', async ({ page }) => {
      await authHelpers.login('parent@example.com', 'password123')
      
      await page.click('button:has-text("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")')
      await page.click('button:has-text("‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
      await expect(page.locator('text="–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"')).toBeVisible()
      await expect(page.locator('text="child@example.com"')).toBeVisible()
      await expect(page.locator('text="üì∏ –§–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"')).toBeVisible()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
      await expect(page.locator('text="‚≠ê 5"')).toBeVisible()
      await expect(page.locator('text="üí∞ 100 —Ä—É–±"')).toBeVisible()
      await expect(page.locator('text="üéÆ 30 –º–∏–Ω"')).toBeVisible()
    })

    test('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É', async ({ page }) => {
      await authHelpers.login('parent@example.com', 'password123')
      
      await page.click('button:has-text("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")')
      await page.click('button:has-text("‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")')
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–¥–∞—á—É
      await page.click('button:has-text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
      await waitHelpers.waitForToast('–ó–∞–¥–∞—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
    })

    test('–æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å –ø—Ä–∏—á–∏–Ω–æ–π', async ({ page }) => {
      await authHelpers.login('parent@example.com', 'password123')
      
      await page.click('button:has-text("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")')
      await page.click('button:has-text("‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")')
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
      await page.fill('textarea[placeholder*="–ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"]', '–ö–æ–º–Ω–∞—Ç–∞ —É–±—Ä–∞–Ω–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é')
      
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–¥–∞—á—É
      await page.click('button:has-text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await waitHelpers.waitForToast('–ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
    })

    test('—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è', async ({ page }) => {
      await authHelpers.login('parent@example.com', 'password123')
      
      await page.click('button:has-text("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")')
      await page.click('button:has-text("‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")')
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã
      await page.click('button:has-text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await expect(page.locator('text*="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"')).toBeVisible()
    })

    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', async ({ page }) => {
      // –ú–æ–∫–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
      await page.route('**/rest/v1/tasks*', async route => {
        await route.fulfill({ json: [] })
      })

      await authHelpers.login('parent@example.com', 'password123')
      
      await page.click('button:has-text("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")')
      await page.click('button:has-text("‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")')
      
      await expect(page.locator('text="–í—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!"')).toBeVisible()
      await expect(page.locator('text="–ù–µ—Ç –∑–∞–¥–∞—á, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"')).toBeVisible()
    })
  })

  test.describe('Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', () => {
    test('–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏', async ({ page }) => {
      await page.route('**/auth/v1/user*', async route => {
        const json = {
          user: { id: 'child-1', email: 'child@example.com', role: 'child' }
        }
        await route.fulfill({ json })
      })

      let taskList = [
        {
          id: 'task-1',
          title: '–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
          status: 'pending',
          priority: 'high'
        }
      ]

      await page.route('**/rest/v1/tasks*', async route => {
        await route.fulfill({ json: taskList })
      })

      await authHelpers.login('child@example.com', 'password123')
      await waitHelpers.waitForLoadingToFinish()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await expect(page.locator('text="–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"')).toBeVisible()
      await expect(page.locator('text="–û–∂–∏–¥–∞–µ—Ç"')).toBeVisible()
      
      // –≠–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ WebSocket
      taskList[0].status = 'in_progress'
      
      // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await page.evaluate(() => {
        window.dispatchEvent(new CustomEvent('supabase-realtime-update', {
          detail: { table: 'tasks', eventType: 'UPDATE' }
        }))
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await expect(page.locator('text="–í –ø—Ä–æ—Ü–µ—Å—Å–µ"')).toBeVisible({ timeout: 5000 })
    })
  })

  test.describe('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á', () => {
    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫—É', async ({ page }) => {
      await page.route('**/auth/v1/user*', async route => {
        const json = {
          user: { id: 'child-1', email: 'child@example.com', role: 'child' }
        }
        await route.fulfill({ json })
      })

      await page.route('**/rest/v1/tasks*', async route => {
        const json = [
          {
            id: 'task-1',
            title: '–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
            status: 'rejected',
            priority: 'high',
            rejection_reason: '–ü–æ–¥ –∫—Ä–æ–≤–∞—Ç—å—é –æ—Å—Ç–∞–ª–∞—Å—å –ø—ã–ª—å'
          }
        ]
        await route.fulfill({ json })
      })

      await authHelpers.login('child@example.com', 'password123')
      await waitHelpers.waitForLoadingToFinish()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
      await expect(page.locator('text="–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"')).toBeVisible()
      await expect(page.locator('text="–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"')).toBeVisible()
      await expect(page.locator('text="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"')).toBeVisible()
      await expect(page.locator('text="–ü–æ–¥ –∫—Ä–æ–≤–∞—Ç—å—é –æ—Å—Ç–∞–ª–∞—Å—å –ø—ã–ª—å"')).toBeVisible()
    })
  })
})
