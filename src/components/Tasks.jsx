/* –§–∞–π–ª: src/components/Tasks.jsx */
/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
/* jshint esversion: 9 */
/* jshint ignore: start */
import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { supabase } from '../lib/supabase'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
const TASK_STATUS = {
  pending: 'pending',        // –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  in_progress: 'in_progress', // –í –ø—Ä–æ—Ü–µ—Å—Å–µ
  completed: 'completed',    // –í—ã–ø–æ–ª–Ω–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
  confirmed: 'confirmed',    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–º
  rejected: 'rejected'       // –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–º
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
const TASK_PRIORITY = {
  low: { label: '–ù–∏–∑–∫–∏–π', color: 'text-green-600', bg: 'bg-green-100' },
  medium: { label: '–°—Ä–µ–¥–Ω–∏–π', color: 'text-yellow-600', bg: 'bg-yellow-100' },
  high: { label: '–í—ã—Å–æ–∫–∏–π', color: 'text-red-600', bg: 'bg-red-100' }
}

function Tasks() {
  const [tasks, setTasks] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [user, setUser] = useState(null)
  const [uploadingFiles, setUploadingFiles] = useState({}) // –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const getCurrentUser = async () => {
      try {
        const { data: { user: authUser } } = await supabase.auth.getUser()
        if (!authUser) return

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        const { data: profile, error: profileError } = await supabase
          .from('users')
          .select('*')
          .eq('id', authUser.id)
          .single()

        if (profileError) {
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ' + profileError.message)
          return
        }

        setUser(profile)
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + err.message)
      }
    }

    getCurrentUser()
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (!user?.id) return

    const fetchTasks = async () => {
      try {
        setLoading(true)
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const { data: tasksData, error: tasksError } = await supabase
          .from('tasks')
          .select(`
            *,
            assigned_by:assigned_by_id(id, email, role),
            family:family_id(family_name)
          `)
          .eq('assigned_to_id', user.id)
          .order('created_at', { ascending: false })

        if (tasksError) {
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: ' + tasksError.message)
          return
        }

        setTasks(tasksData || [])
      } catch (err) {
        setError('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ' + err.message)
      } finally {
        setLoading(false)
      }
    }

    fetchTasks()

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ tasks
    const tasksSubscription = supabase
      .channel('tasks_changes')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'tasks',
          filter: `assigned_to_id=eq.${user.id}`
        }, 
        (payload) => {
          console.log('–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–∞—Ö:', payload)
          fetchTasks() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        }
      )
      .subscribe()

    return () => {
      tasksSubscription.unsubscribe()
    }
  }, [user])

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
  const uploadProofPhoto = async (taskId, file) => {
    try {
      setUploadingFiles(prev => ({ ...prev, [taskId]: true }))

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const fileExt = file.name.split('.').pop()
      const fileName = `${taskId}_${Date.now()}.${fileExt}`
      const filePath = `task-proofs/${fileName}`

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
      const { error: uploadError } = await supabase.storage
        .from('task-proofs')
        .upload(filePath, file)

      if (uploadError) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + uploadError.message)
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
      const { data: { publicUrl } } = supabase.storage
        .from('task-proofs')
        .getPublicUrl(filePath)

      return { filePath, publicUrl }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', err)
      throw err
    } finally {
      setUploadingFiles(prev => ({ ...prev, [taskId]: false }))
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const completeTask = async (taskId, proofFile = null) => {
    try {
      let proofUrl = null

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
      if (proofFile) {
        const uploadResult = await uploadProofPhoto(taskId, proofFile)
        proofUrl = uploadResult.publicUrl
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      const { error: updateError } = await supabase
        .from('tasks')
        .update({
          status: TASK_STATUS.completed,
          proof_url: proofUrl,
          completed_at: new Date().toISOString()
        })
        .eq('id', taskId)

      if (updateError) {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + updateError.message)
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setTasks(prev => prev.map(task => 
        task.id === taskId 
          ? { ...task, status: TASK_STATUS.completed, proof_url: proofUrl, completed_at: new Date().toISOString() }
          : task
      ))

    } catch (err) {
      setError(err.message)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const startTask = async (taskId) => {
    try {
      const { error: updateError } = await supabase
        .from('tasks')
        .update({
          status: TASK_STATUS.in_progress,
          started_at: new Date().toISOString()
        })
        .eq('id', taskId)

      if (updateError) {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + updateError.message)
      }

      setTasks(prev => prev.map(task => 
        task.id === taskId 
          ? { ...task, status: TASK_STATUS.in_progress, started_at: new Date().toISOString() }
          : task
      ))

    } catch (err) {
      setError(err.message)
    }
  }

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏
  const TaskCard = ({ task }) => {
    const [showPhotoUpload, setShowPhotoUpload] = useState(false)
    const [selectedFile, setSelectedFile] = useState(null)

    const priority = TASK_PRIORITY[task.priority] || TASK_PRIORITY.medium
    const isUploading = uploadingFiles[task.id]

    const handleFileSelect = (event) => {
      const file = event.target.files[0]
      if (file) {
        setSelectedFile(file)
      }
    }

    const handleCompleteWithPhoto = async () => {
      if (selectedFile) {
        await completeTask(task.id, selectedFile)
        setSelectedFile(null)
        setShowPhotoUpload(false)
      }
    }

    const formatReward = (reward) => {
      if (!reward) return '–ë–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã'
      
      const parts = []
      if (reward.stars > 0) parts.push(`‚≠ê ${reward.stars}`)
      if (reward.money > 0) parts.push(`üí∞ ${reward.money}‚ÇΩ`)
      if (reward.screen_time > 0) parts.push(`üéÆ ${reward.screen_time}–º–∏–Ω`)
      
      return parts.length > 0 ? parts.join(', ') : '–ë–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã'
    }

    return (
      <motion.div
        layout
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        className="bg-white rounded-lg shadow-md border-2 border-minecraft-green/20 p-6 mb-4"
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
        <div className="flex justify-between items-start mb-3">
          <h3 className="text-lg font-pixel text-minecraft-green" style={{ fontFamily: '"Press Start 2P", "Courier New", monospace' }}>
            {task.title}
          </h3>
          <span className={`px-2 py-1 rounded-full text-xs font-semibold ${priority.color} ${priority.bg}`}>
            {priority.label}
          </span>
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        {task.description && (
          <p className="text-gray-700 mb-4">{task.description}</p>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ */}
        <div className="bg-yellow-50 border border-yellow-200 rounded p-3 mb-4">
          <span className="text-sm font-semibold text-yellow-800">
            –ù–∞–≥—Ä–∞–¥–∞: {formatReward(task.reward)}
          </span>
        </div>

        {/* –î–µ–¥–ª–∞–π–Ω */}
        {task.due_date && (
          <div className="text-sm text-gray-600 mb-4">
            üìÖ –°—Ä–æ–∫: {new Date(task.due_date).toLocaleDateString('ru-RU')}
          </div>
        )}

        {/* –°—Ç–∞—Ç—É—Å –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
          <div className="flex items-center space-x-2">
            <span className="text-sm font-semibold">–°—Ç–∞—Ç—É—Å:</span>
            <span className={`px-2 py-1 rounded text-xs font-semibold ${
              task.status === TASK_STATUS.pending ? 'bg-gray-100 text-gray-800' :
              task.status === TASK_STATUS.in_progress ? 'bg-blue-100 text-blue-800' :
              task.status === TASK_STATUS.completed ? 'bg-yellow-100 text-yellow-800' :
              task.status === TASK_STATUS.confirmed ? 'bg-green-100 text-green-800' :
              'bg-red-100 text-red-800'
            }`}>
              {task.status === TASK_STATUS.pending ? '–û–∂–∏–¥–∞–µ—Ç' :
               task.status === TASK_STATUS.in_progress ? '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' :
               task.status === TASK_STATUS.completed ? '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' :
               task.status === TASK_STATUS.confirmed ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' :
               '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'}
            </span>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex space-x-2">
            {task.status === TASK_STATUS.pending && (
              <button
                onClick={() => startTask(task.id)}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors text-sm"
              >
                –ù–∞—á–∞—Ç—å
              </button>
            )}

            {task.status === TASK_STATUS.in_progress && (
              <>
                <button
                  onClick={() => setShowPhotoUpload(!showPhotoUpload)}
                  className="px-4 py-2 bg-minecraft-green text-white rounded hover:bg-green-600 transition-colors text-sm"
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å
                </button>
                <button
                  onClick={() => completeTask(task.id)}
                  className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors text-sm"
                >
                  –ë–µ–∑ —Ñ–æ—Ç–æ
                </button>
              </>
            )}
          </div>
        </div>

        {/* –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ */}
        <AnimatePresence>
          {showPhotoUpload && task.status === TASK_STATUS.in_progress && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="mt-4 p-4 bg-gray-50 rounded-lg border-dashed border-2 border-gray-300"
            >
              <h4 className="text-sm font-semibold mb-3">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ:</h4>
              
              <input
                type="file"
                accept="image/*"
                onChange={handleFileSelect}
                className="mb-3 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-minecraft-green file:text-white hover:file:bg-minecraft-green/80"
              />

              {selectedFile && (
                <div className="mb-3">
                  <p className="text-sm text-gray-600">–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selectedFile.name}</p>
                  <img 
                    src={URL.createObjectURL(selectedFile)} 
                    alt="Preview" 
                    className="mt-2 max-w-xs max-h-32 object-cover rounded"
                  />
                </div>
              )}

              <div className="flex space-x-2">
                <button
                  onClick={handleCompleteWithPhoto}
                  disabled={!selectedFile || isUploading}
                  className="px-4 py-2 bg-minecraft-green text-white rounded hover:bg-green-600 disabled:bg-gray-400 transition-colors text-sm"
                >
                  {isUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                </button>
                <button
                  onClick={() => {
                    setShowPhotoUpload(false)
                    setSelectedFile(null)
                  }}
                  className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors text-sm"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ */}
        {task.proof_url && (
          <div className="mt-4">
            <h4 className="text-sm font-semibold mb-2">–§–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ:</h4>
            <img 
              src={task.proof_url} 
              alt="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" 
              className="max-w-xs max-h-32 object-cover rounded border"
            />
          </div>
        )}

        {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ */}
        {task.status === TASK_STATUS.rejected && task.rejection_reason && (
          <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded">
            <h4 className="text-sm font-semibold text-red-800 mb-1">–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</h4>
            <p className="text-sm text-red-700">{task.rejection_reason}</p>
          </div>
        )}
      </motion.div>
    )
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
          className="w-8 h-8 border-4 border-minecraft-green border-t-transparent rounded-full"
        />
        <span className="ml-3 text-minecraft-green font-pixel" style={{ fontFamily: '"Press Start 2P", "Courier New", monospace' }}>
          –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏...
        </span>
      </div>
    )
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-6">
        <h3 className="text-red-800 font-pixel mb-2" style={{ fontFamily: '"Press Start 2P", "Courier New", monospace' }}>
          –û—à–∏–±–∫–∞
        </h3>
        <p className="text-red-700">{error}</p>
        <button
          onClick={() => window.location.reload()}
          className="mt-3 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
        >
          –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        </button>
      </div>
    )
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow">
      <h2 className="text-2xl font-pixel text-minecraft-green mb-6" style={{ fontFamily: '"Press Start 2P", "Courier New", monospace' }}>
        –ú–æ–∏ –∑–∞–¥–∞—á–∏
      </h2>

      {tasks.length === 0 ? (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üìù</div>
          <h3 className="text-xl font-pixel text-minecraft-green mb-2" style={{ fontFamily: '"Press Start 2P", "Courier New", monospace' }}>
            –ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç
          </h3>
          <p className="text-gray-600">
            –†–æ–¥–∏—Ç–µ–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –≤–∞–º –∑–∞–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ!
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          <AnimatePresence>
            {tasks.map(task => (
              <TaskCard key={task.id} task={task} />
            ))}
          </AnimatePresence>
        </div>
      )}
    </div>
  )
}

export default Tasks
/* jshint ignore: end */
