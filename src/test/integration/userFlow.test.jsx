/* –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */

import { describe, test, expect, vi, beforeEach, afterEach } from 'vitest'
import { screen, fireEvent, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { renderWithProviders, createSupabaseMock, mockUser, mockChild, mockTask, createMockFile } from '../utils'
import App from '../../App'

// Mock –¥–ª—è supabase
vi.mock('../../lib/supabase', () => ({
  supabase: createSupabaseMock()
}))

describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤', () => {
  let user
  let mockSupabase

  beforeEach(() => {
    user = userEvent.setup()
    vi.clearAllMocks()
    
    mockSupabase = createSupabaseMock({
      user: null,
      session: null,
      users: [],
      tasks: [],
      families: []
    })
  })

  afterEach(() => {
    vi.resetAllMocks()
  })

  describe('–°—Ü–µ–Ω–∞—Ä–∏–π: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—è', () => {
    test('—Ä–æ–¥–∏—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ—Ç —Å–µ–º—å—é –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', async () => {
      const { supabase } = await import('../../lib/supabase')
      
      // Mock –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω)
      supabase.auth.getSession.mockResolvedValue({
        data: { session: null },
        error: null
      })
      
      supabase.auth.onAuthStateChange.mockImplementation((callback) => {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        setTimeout(() => {
          callback('SIGNED_IN', {
            user: mockUser({ role: 'parent' }),
            access_token: 'test-token'
          })
        }, 100)
        
        return {
          data: { subscription: { unsubscribe: vi.fn() } }
        }
      })

      renderWithProviders(<App />)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
      await waitFor(() => {
        expect(screen.getByRole('heading', { name: /–≤—Ö–æ–¥/i })).toBeInTheDocument()
      })

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      const switchToRegister = screen.getByText(/–Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞\? –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å/i)
      await user.click(switchToRegister)

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const emailInput = screen.getByLabelText(/email/i)
      const passwordInput = screen.getByLabelText(/–ø–∞—Ä–æ–ª—å/i)
      const roleSelect = screen.getByLabelText(/—Ä–æ–ª—å/i)
      
      await user.type(emailInput, 'parent@example.com')
      await user.type(passwordInput, 'password123')
      await user.selectOptions(roleSelect, 'parent')

      // Mock —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      supabase.auth.signUp.mockResolvedValue({
        data: { user: mockUser({ email: 'parent@example.com', role: 'parent' }) },
        error: null
      })
      
      supabase.auth.getSession.mockResolvedValue({
        data: { session: { user: mockUser({ role: 'parent' }) } }
      })
      
      supabase.auth.updateUser.mockResolvedValue({ error: null })
      
      // Mock —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏
      supabase.from.mockImplementation((table) => {
        if (table === 'families') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            single: vi.fn().mockResolvedValue({ data: null, error: { code: 'PGRST116' } }),
            insert: vi.fn(() => ({
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: { family_id: 'new-family-123', family_name: '–°–µ–º—å—è parent' },
                error: null
              })
            }))
          }
        }
        
        if (table === 'users') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            single: vi.fn().mockResolvedValue({
              data: mockUser({ role: 'parent', family_id: 'new-family-123' }),
              error: null
            })
          }
        }
        
        return mockSupabase.from(table)
      })

      const submitButton = screen.getByRole('button', { name: /–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è/i })
      await user.click(submitButton)

      // –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await waitFor(() => {
        expect(screen.getByText(/family task manager/i)).toBeInTheDocument()
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
      await waitFor(() => {
        expect(screen.getByRole('button', { name: /üëë —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/i })).toBeInTheDocument()
      })
    })
  })

  describe('–°—Ü–µ–Ω–∞—Ä–∏–π: –†–µ–±–µ–Ω–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É', () => {
    test('—Ä–µ–±–µ–Ω–æ–∫ –≤—Ö–æ–¥–∏—Ç, –≤–∏–¥–∏—Ç –∑–∞–¥–∞—á–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É —Å —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º', async () => {
      const { supabase } = await import('../../lib/supabase')
      
      const childUser = mockChild({ id: 'child-1', email: 'child@example.com' })
      const parentUser = mockUser({ id: 'parent-1', email: 'parent@example.com' })
      const testTask = mockTask({
        id: 'task-1',
        title: '–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
        status: 'pending',
        assigned_to_id: 'child-1',
        assigned_by_id: 'parent-1'
      })

      // Mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–±–µ–Ω–∫–∞
      supabase.auth.getSession.mockResolvedValue({
        data: { session: { user: childUser } },
        error: null
      })
      
      supabase.auth.getUser.mockResolvedValue({
        data: { user: childUser },
        error: null
      })

      supabase.auth.onAuthStateChange.mockImplementation((callback) => {
        setTimeout(() => callback('SIGNED_IN', { user: childUser }), 0)
        return {
          data: { subscription: { unsubscribe: vi.fn() } }
        }
      })

      // Mock –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∑–∞–¥–∞—á
      supabase.from.mockImplementation((table) => {
        if (table === 'users') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            single: vi.fn().mockResolvedValue({
              data: childUser,
              error: null
            }),
            insert: vi.fn(() => ({
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: childUser,
                error: null
              })
            })),
            update: vi.fn(() => ({
              eq: vi.fn().mockReturnThis(),
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: childUser,
                error: null
              })
            }))
          }
        }
        
        if (table === 'tasks') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            order: vi.fn().mockResolvedValue({
              data: [testTask],
              error: null
            }),
            update: vi.fn(() => ({
              eq: vi.fn().mockResolvedValue({ error: null })
            }))
          }
        }
        
        if (table === 'families') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            single: vi.fn().mockResolvedValue({
              data: { family_id: 'test-family-id', family_name: '–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ–º—å—è' },
              error: null
            }),
            insert: vi.fn(() => ({
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: { family_id: 'test-family-id' },
                error: null
              })
            }))
          }
        }
        
        return mockSupabase.from(table)
      })

      // Mock real-time –ø–æ–¥–ø–∏—Å–∫–∏
      supabase.channel.mockReturnValue({
        on: vi.fn().mockReturnThis(),
        subscribe: vi.fn().mockReturnThis(),
        unsubscribe: vi.fn()
      })

      renderWithProviders(<App />)

      // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
      await waitFor(() => {
        expect(screen.getByText(/–º–æ–∏ –∑–∞–¥–∞—á–∏/i)).toBeInTheDocument()
      })

      await waitFor(() => {
        expect(screen.getByText('–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É')).toBeInTheDocument()
      })

      // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
      const startButton = screen.getByRole('button', { name: /–Ω–∞—á–∞—Ç—å/i })
      await user.click(startButton)

      // –û–±–Ω–æ–≤–ª—è–µ–º mock –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      supabase.from.mockImplementation((table) => {
        if (table === 'tasks') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            order: vi.fn().mockResolvedValue({
              data: [{ ...testTask, status: 'in_progress' }],
              error: null
            }),
            update: vi.fn(() => ({
              eq: vi.fn().mockResolvedValue({ error: null })
            }))
          }
        }
        return mockSupabase.from(table)
      })

      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ñ–æ—Ç–æ
      await waitFor(() => {
        expect(screen.getByRole('button', { name: /–∑–∞–≤–µ—Ä—à–∏—Ç—å/i })).toBeInTheDocument()
      })

      const completeButton = screen.getByRole('button', { name: /–∑–∞–≤–µ—Ä—à–∏—Ç—å/i })
      await user.click(completeButton)

      // –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
      await waitFor(() => {
        expect(screen.getByText(/–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ/i)).toBeInTheDocument()
      })

      // Mock –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
      supabase.storage.from.mockReturnValue({
        upload: vi.fn().mockResolvedValue({ error: null }),
        getPublicUrl: vi.fn().mockReturnValue({
          data: { publicUrl: 'http://test.com/uploaded-proof.jpg' }
        })
      })

      // –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
      const fileInput = screen.getByRole('button', { name: /–≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª/i })
      const file = createMockFile({ name: 'room-clean.jpg', type: 'image/jpeg' })
      
      await user.upload(fileInput, file)

      await waitFor(() => {
        expect(screen.getByText(/–≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: room-clean\.jpg/i)).toBeInTheDocument()
      })

      const sendButton = screen.getByRole('button', { name: /–æ—Ç–ø—Ä–∞–≤–∏—Ç—å/i })
      await user.click(sendButton)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
      expect(supabase.storage.from).toHaveBeenCalledWith('task-proofs')
      expect(supabase.from).toHaveBeenCalledWith('tasks')
    })
  })

  describe('–°—Ü–µ–Ω–∞—Ä–∏–π: –†–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–¥–∞—á—É', () => {
    test('—Ä–æ–¥–∏—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤–∏–¥–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –µ—ë', async () => {
      const { supabase } = await import('../../lib/supabase')
      
      const parentUser = mockUser({ id: 'parent-1', role: 'parent' })
      const childUser = mockChild({ id: 'child-1' })
      const completedTask = mockTask({
        id: 'task-1',
        title: '–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
        status: 'completed',
        assigned_to_id: 'child-1',
        assigned_by_id: 'parent-1',
        proof_url: 'http://test.com/proof.jpg',
        assigned_user: { email: 'child@example.com' }
      })

      // Mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
      supabase.auth.getSession.mockResolvedValue({
        data: { session: { user: parentUser } },
        error: null
      })
      
      supabase.auth.getUser.mockResolvedValue({
        data: { user: parentUser },
        error: null
      })

      supabase.auth.onAuthStateChange.mockImplementation((callback) => {
        setTimeout(() => callback('SIGNED_IN', { user: parentUser }), 0)
        return {
          data: { subscription: { unsubscribe: vi.fn() } }
        }
      })

      // Mock –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      supabase.from.mockImplementation((table) => {
        if (table === 'users') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockImplementation((field, value) => {
              if (field === 'id') {
                return {
                  single: vi.fn().mockResolvedValue({
                    data: parentUser,
                    error: null
                  })
                }
              }
              if (field === 'family_id') {
                return {
                  eq: vi.fn().mockReturnThis(),
                  order: vi.fn().mockResolvedValue({
                    data: [childUser],
                    error: null
                  })
                }
              }
            }),
            insert: vi.fn(() => ({
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: parentUser,
                error: null
              })
            })),
            update: vi.fn(() => ({
              eq: vi.fn().mockReturnThis(),
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: parentUser,
                error: null
              })
            }))
          }
        }
        
        if (table === 'tasks') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            order: vi.fn().mockResolvedValue({
              data: [completedTask],
              error: null
            }),
            update: vi.fn(() => ({
              eq: vi.fn().mockResolvedValue({ error: null })
            }))
          }
        }
        
        if (table === 'families') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            single: vi.fn().mockResolvedValue({
              data: { family_id: 'test-family-id', family_name: '–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ–º—å—è' },
              error: null
            }),
            insert: vi.fn(() => ({
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: { family_id: 'test-family-id' },
                error: null
              })
            }))
          }
        }
        
        return mockSupabase.from(table)
      })

      renderWithProviders(<App />)

      // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await waitFor(() => {
        expect(screen.getByText(/family task manager/i)).toBeInTheDocument()
      })

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const parentDashboardButton = screen.getByRole('button', { name: /üëë —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/i })
      await user.click(parentDashboardButton)

      await waitFor(() => {
        expect(screen.getByText(/–ø–∞–Ω–µ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—è/i)).toBeInTheDocument()
      })

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
      const pendingTab = screen.getByRole('button', { name: /‚è≥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ/i })
      await user.click(pendingTab)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
      await waitFor(() => {
        expect(screen.getByText('–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É')).toBeInTheDocument()
        expect(screen.getByText('child@example.com')).toBeInTheDocument()
        expect(screen.getByText(/üì∏ —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ/i)).toBeInTheDocument()
      })

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–¥–∞—á—É
      const confirmButton = screen.getByRole('button', { name: /‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/i })
      await user.click(confirmButton)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      expect(supabase.from).toHaveBeenCalledWith('tasks')
    })
  })

  describe('–°—Ü–µ–Ω–∞—Ä–∏–π: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏', () => {
    test('—Ä–æ–¥–∏—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –µ—ë —Ä–µ–±–µ–Ω–∫—É', async () => {
      const { supabase } = await import('../../lib/supabase')
      
      const parentUser = mockUser({ id: 'parent-1', role: 'parent' })
      const childUser = mockChild({ id: 'child-1', email: 'child@example.com' })

      // Mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      supabase.auth.getSession.mockResolvedValue({
        data: { session: { user: parentUser } },
        error: null
      })
      
      supabase.auth.getUser.mockResolvedValue({
        data: { user: parentUser },
        error: null
      })

      supabase.auth.onAuthStateChange.mockImplementation((callback) => {
        setTimeout(() => callback('SIGNED_IN', { user: parentUser }), 0)
        return {
          data: { subscription: { unsubscribe: vi.fn() } }
        }
      })

      // Mock –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      supabase.from.mockImplementation((table) => {
        if (table === 'users') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockImplementation((field, value) => {
              if (field === 'id') {
                return {
                  single: vi.fn().mockResolvedValue({
                    data: parentUser,
                    error: null
                  })
                }
              }
              if (field === 'family_id') {
                return {
                  eq: vi.fn().mockReturnThis(),
                  order: vi.fn().mockResolvedValue({
                    data: [childUser],
                    error: null
                  })
                }
              }
            }),
            insert: vi.fn(() => ({
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: parentUser,
                error: null
              })
            })),
            update: vi.fn(() => ({
              eq: vi.fn().mockReturnThis(),
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: parentUser,
                error: null
              })
            }))
          }
        }
        
        if (table === 'tasks') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            order: vi.fn().mockResolvedValue({
              data: [],
              error: null
            }),
            insert: vi.fn().mockResolvedValue({
              error: null
            })
          }
        }
        
        if (table === 'families') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            single: vi.fn().mockResolvedValue({
              data: { family_id: 'test-family-id', family_name: '–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ–º—å—è' },
              error: null
            }),
            insert: vi.fn(() => ({
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: { family_id: 'test-family-id' },
                error: null
              })
            }))
          }
        }
        
        return mockSupabase.from(table)
      })

      renderWithProviders(<App />)

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await waitFor(() => {
        expect(screen.getByRole('button', { name: /üëë —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/i })).toBeInTheDocument()
      })

      const parentDashboardButton = screen.getByRole('button', { name: /üëë —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/i })
      await user.click(parentDashboardButton)

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
      await waitFor(() => {
        expect(screen.getByRole('button', { name: /‚ûï —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É/i })).toBeInTheDocument()
      })

      const createTab = screen.getByRole('button', { name: /‚ûï —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É/i })
      await user.click(createTab)

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
      await waitFor(() => {
        expect(screen.getByLabelText(/–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏/i)).toBeInTheDocument()
      })

      const titleInput = screen.getByLabelText(/–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏/i)
      const descriptionInput = screen.getByLabelText(/–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ/i)
      const childSelect = screen.getByLabelText(/–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–µ–±–µ–Ω–∫—É/i)
      const prioritySelect = screen.getByLabelText(/–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç/i)
      const starsInput = screen.getByLabelText(/‚≠ê –∑–≤–µ–∑–¥–æ—á–∫–∏/i)
      const moneyInput = screen.getByLabelText(/üí∞ –¥–µ–Ω—å–≥–∏/i)

      await user.type(titleInput, '–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É')
      await user.type(descriptionInput, '–ü–æ–º—ã—Ç—å –≤—Å—é –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ —É–∂–∏–Ω–∞')
      await user.selectOptions(childSelect, 'child-1')
      await user.selectOptions(prioritySelect, 'high')
      await user.clear(starsInput)
      await user.type(starsInput, '10')
      await user.clear(moneyInput)
      await user.type(moneyInput, '50')

      const submitButton = screen.getByRole('button', { name: /—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É/i })
      await user.click(submitButton)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
      await waitFor(() => {
        expect(supabase.from).toHaveBeenCalledWith('tasks')
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      expect(global.alert).toHaveBeenCalledWith('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
    })
  })

  describe('–°—Ü–µ–Ω–∞—Ä–∏–π: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–º—å–µ–π', () => {
    test('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç —Å–µ–º—å—é, –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –∏ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –ø–æ –∫–æ–¥—É', async () => {
      const { supabase } = await import('../../lib/supabase')
      
      const firstUser = mockUser({ id: 'user-1', family_id: null })
      const familyData = { family_id: 'family-123', family_name: '–°–µ–º—å—è user' }

      // Mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      supabase.auth.getSession.mockResolvedValue({
        data: { session: { user: firstUser } },
        error: null
      })
      
      supabase.auth.getUser.mockResolvedValue({
        data: { user: firstUser },
        error: null
      })

      supabase.auth.onAuthStateChange.mockImplementation((callback) => {
        setTimeout(() => callback('SIGNED_IN', { user: firstUser }), 0)
        return {
          data: { subscription: { unsubscribe: vi.fn() } }
        }
      })

      // Mock –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Å–µ–º—å–∏
      supabase.from.mockImplementation((table) => {
        if (table === 'users') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            single: vi.fn().mockResolvedValue({
              data: firstUser,
              error: null
            }),
            insert: vi.fn(() => ({
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: firstUser,
                error: null
              })
            })),
            update: vi.fn(() => ({
              eq: vi.fn().mockResolvedValue({ error: null })
            }))
          }
        }
        
        if (table === 'families') {
          return {
            insert: vi.fn(() => ({
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: familyData,
                error: null
              })
            })),
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            single: vi.fn().mockResolvedValue({
              data: familyData,
              error: null
            })
          }
        }
        
        return mockSupabase.from(table)
      })

      renderWithProviders(<App />)

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
      await waitFor(() => {
        expect(screen.getByRole('button', { name: /üë§ –ø—Ä–æ—Ñ–∏–ª—å/i })).toBeInTheDocument()
      })

      const profileButton = screen.getByRole('button', { name: /üë§ –ø—Ä–æ—Ñ–∏–ª—å/i })
      await user.click(profileButton)

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ–º—å—é
      await waitFor(() => {
        expect(screen.getByText(/—É –≤–∞—Å –Ω–µ—Ç —Å–µ–º—å–∏/i)).toBeInTheDocument()
        expect(screen.getByRole('button', { name: /—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ–º—å—é/i })).toBeInTheDocument()
      })

      const createFamilyButton = screen.getByRole('button', { name: /—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ–º—å—é/i })
      await user.click(createFamilyButton)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–º—å—è –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
      expect(supabase.from).toHaveBeenCalledWith('families')
      expect(global.alert).toHaveBeenCalledWith('–ù–æ–≤–∞—è —Å–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞! –í–∞—à –∫–æ–¥ —Å–µ–º—å–∏: family-123')
    })
  })

  describe('–°—Ü–µ–Ω–∞—Ä–∏–π: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–µ–ª–∫–∞ –∑–∞–¥–∞—á–∏', () => {
    test('—Ä–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, —Ä–µ–±–µ–Ω–æ–∫ –≤–∏–¥–∏—Ç –ø—Ä–∏—á–∏–Ω—É –∏ –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ—Ç', async () => {
      const { supabase } = await import('../../lib/supabase')
      
      const parentUser = mockUser({ id: 'parent-1', role: 'parent' })
      const rejectedTask = mockTask({
        id: 'task-1',
        title: '–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É',
        status: 'rejected',
        rejection_reason: '–ü–æ–¥ –∫—Ä–æ–≤–∞—Ç—å—é –æ—Å—Ç–∞–ª–∞—Å—å –ø—ã–ª—å',
        assigned_to_id: 'child-1'
      })

      // Mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–±–µ–Ω–∫–∞
      supabase.auth.getSession.mockResolvedValue({
        data: { session: { user: mockChild() } },
        error: null
      })
      
      supabase.auth.getUser.mockResolvedValue({
        data: { user: mockChild() },
        error: null
      })

      supabase.auth.onAuthStateChange.mockImplementation((callback) => {
        setTimeout(() => callback('SIGNED_IN', { user: mockChild() }), 0)
        return {
          data: { subscription: { unsubscribe: vi.fn() } }
        }
      })

      // Mock –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
      supabase.from.mockImplementation((table) => {
        if (table === 'users') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            single: vi.fn().mockResolvedValue({
              data: mockChild(),
              error: null
            }),
            insert: vi.fn(() => ({
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: mockChild(),
                error: null
              })
            })),
            update: vi.fn(() => ({
              eq: vi.fn().mockReturnThis(),
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: mockChild(),
                error: null
              })
            }))
          }
        }
        
        if (table === 'tasks') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            order: vi.fn().mockResolvedValue({
              data: [rejectedTask],
              error: null
            }),
            update: vi.fn(() => ({
              eq: vi.fn().mockResolvedValue({ error: null })
            }))
          }
        }
        
        if (table === 'families') {
          return {
            select: vi.fn().mockReturnThis(),
            eq: vi.fn().mockReturnThis(),
            single: vi.fn().mockResolvedValue({
              data: { family_id: 'test-family-id', family_name: '–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ–º—å—è' },
              error: null
            }),
            insert: vi.fn(() => ({
              select: vi.fn().mockReturnThis(),
              single: vi.fn().mockResolvedValue({
                data: { family_id: 'test-family-id' },
                error: null
              })
            }))
          }
        }
        
        return mockSupabase.from(table)
      })

      // Mock real-time –ø–æ–¥–ø–∏—Å–∫–∏
      supabase.channel.mockReturnValue({
        on: vi.fn().mockReturnThis(),
        subscribe: vi.fn().mockReturnThis(),
        unsubscribe: vi.fn()
      })

      renderWithProviders(<App />)

      // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á
      await waitFor(() => {
        expect(screen.getByText(/–º–æ–∏ –∑–∞–¥–∞—á–∏/i)).toBeInTheDocument()
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–∏–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Å –ø—Ä–∏—á–∏–Ω–æ–π
      await waitFor(() => {
        expect(screen.getByText('–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É')).toBeInTheDocument()
        expect(screen.getByText('–û—Ç–∫–ª–æ–Ω–µ–Ω–∞')).toBeInTheDocument()
        expect(screen.getByText(/–ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è/i)).toBeInTheDocument()
        expect(screen.getByText('–ü–æ–¥ –∫—Ä–æ–≤–∞—Ç—å—é –æ—Å—Ç–∞–ª–∞—Å—å –ø—ã–ª—å')).toBeInTheDocument()
      })

      // –†–µ–±–µ–Ω–æ–∫ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞—Ç—å –∑–∞–¥–∞—á—É
      // (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ pending, –Ω–æ —ç—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏)
    })
  })
})
