#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/create-component-template.cjs ComponentName
 */

const fs = require('fs');
const path = require('path');

const componentName = process.argv[2];

if (!componentName) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/create-component-template.cjs ComponentName');
  process.exit(1);
}

// –®–∞–±–ª–æ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const componentTemplate = `import React from 'react'
import { motion } from 'framer-motion'

/**
 * ${componentName} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export default function ${componentName}(props) {
  const MotionDiv = motion.div

  return (
    <MotionDiv
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="p-4"
    >
      <h2 className="text-xl font-bold">${componentName}</h2>
      {/* TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ */}
    </MotionDiv>
  )
}
`;

// –®–∞–±–ª–æ–Ω —Ç–µ—Å—Ç–æ–≤
const testTemplate = `import React from 'react'
import { describe, test, expect, beforeEach, vi } from 'vitest'
import { screen, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { renderWithProviders, createSupabaseMock } from '../../test/utils'
import ${componentName} from '../${componentName}'

describe('${componentName}', () => {
  let user

  beforeEach(() => {
    user = userEvent.setup()
    vi.clearAllMocks()
  })

  describe('–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞', () => {
    test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
      renderWithProviders(<${componentName} />)
      
      expect(screen.getByText('${componentName}')).toBeInTheDocument()
    })

    test('–ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏', () => {
      renderWithProviders(<${componentName} />)
      
      const container = screen.getByText('${componentName}').closest('div')
      expect(container).toHaveClass('p-4')
    })
  })

  describe('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', () => {
    test('–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è', async () => {
      renderWithProviders(<${componentName} />)
      
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
      expect(true).toBe(true) // placeholder
    })

    test('–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ', async () => {
      renderWithProviders(<${componentName} />)
      
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      expect(true).toBe(true) // placeholder
    })
  })

  describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API', () => {
    test('—É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ', async () => {
      const mockSupabase = createSupabaseMock()
      
      renderWithProviders(<${componentName} />)
      
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è API –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
      expect(true).toBe(true) // placeholder
    })

    test('–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ API', async () => {
      const mockSupabase = createSupabaseMock()
      
      renderWithProviders(<${componentName} />)
      
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –æ—à–∏–±–æ–∫
      expect(true).toBe(true) // placeholder
    })
  })

  describe('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', () => {
    test('–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç keyboard navigation', async () => {
      renderWithProviders(<${componentName} />)
      
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è accessibility
      expect(true).toBe(true) // placeholder
    })

    test('–∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ARIA –∞—Ç—Ä–∏–±—É—Ç—ã', () => {
      renderWithProviders(<${componentName} />)
      
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è ARIA
      expect(true).toBe(true) // placeholder
    })
  })
})
`;

// E2E —Ç–µ—Å—Ç —à–∞–±–ª–æ–Ω
const e2eTemplate = `import { test, expect } from '@playwright/test'

test.describe('${componentName} E2E', () => {
  test.beforeEach(async ({ page }) => {
    // TODO: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await page.goto('/')
  })

  test('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å ${componentName}', async ({ page }) => {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å E2E —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    
    // –ü—Ä–∏–º–µ—Ä:
    // await page.click('[data-testid="${componentName.toLowerCase()}"]')
    // await expect(page.locator('text=${componentName}')).toBeVisible()
  })

  test('${componentName} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 })
    
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
  })
})
`;

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
const componentDir = path.join('src', 'components');
const testDir = path.join('src', 'components', '__tests__');
const e2eDir = 'playwright-tests';

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
[componentDir, testDir, e2eDir].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
const componentPath = path.join(componentDir, `${componentName}.jsx`);
const testPath = path.join(testDir, `${componentName}.test.jsx`);
const e2ePath = path.join(e2eDir, `${componentName.toLowerCase()}.e2e.js`);

try {
  fs.writeFileSync(componentPath, componentTemplate);
  fs.writeFileSync(testPath, testTemplate);
  fs.writeFileSync(e2ePath, e2eTemplate);

  console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:');
  console.log(`üìÅ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: ${componentPath}`);
  console.log(`üß™ Unit —Ç–µ—Å—Ç—ã: ${testPath}`);
  console.log(`üé≠ E2E —Ç–µ—Å—Ç—ã: ${e2ePath}`);
  console.log('');
  console.log('üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
  console.log('2. –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã');
  console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: npm run test:component ' + componentName);
  console.log('4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å coverage: npm run test:coverage');

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error.message);
  process.exit(1);
}
